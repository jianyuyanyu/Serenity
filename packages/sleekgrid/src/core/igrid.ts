import type { CellNavigation } from "./cellnavigation";
import type { Column, ColumnSort } from "./column";
import type { EditController, Editor, EditorClass, EditorHost, EditorLock, Position } from "./editing";
import type { EventEmitter, IEventData } from "./event";
import type { ArgsAddNewRow, ArgsCell, ArgsCellChange, ArgsCellEdit, ArgsColumn, ArgsColumnNode, ArgsCssStyle, ArgsEditorDestroy, ArgsGrid, ArgsScroll, ArgsSelectedRowsChange, ArgsSort, ArgsValidationError } from "./eventargs";
import type { CellStylesHash, ColumnFormat, FormatterContext } from "./formatting";
import type { GridOptions } from "./gridoptions";
import type { IPlugin } from "./iplugin";
import type { SelectionModel } from "./selection-model";
import type { ViewRange } from "./viewrange";

export interface IGrid<TItem = any> extends EditorHost, CellNavigation {
    readonly onActiveCellChanged: EventEmitter<ArgsCell, IEventData>;
    readonly onActiveCellPositionChanged: EventEmitter<ArgsGrid, IEventData>;
    readonly onAddNewRow: EventEmitter<ArgsAddNewRow, IEventData>;
    readonly onBeforeCellEditorDestroy: EventEmitter<ArgsEditorDestroy, IEventData>;
    readonly onBeforeDestroy: EventEmitter<ArgsGrid, IEventData>;
    readonly onBeforeEditCell: EventEmitter<ArgsCellEdit, IEventData>;
    readonly onBeforeFooterRowCellDestroy: EventEmitter<ArgsColumnNode, IEventData>;
    readonly onBeforeHeaderCellDestroy: EventEmitter<ArgsColumnNode, IEventData>;
    readonly onBeforeHeaderRowCellDestroy: EventEmitter<ArgsColumnNode, IEventData>;
    readonly onCellChange: EventEmitter<ArgsCellChange, IEventData>;
    readonly onCellCssStylesChanged: EventEmitter<ArgsCssStyle, IEventData>;
    readonly onClick: EventEmitter<ArgsCell, MouseEvent>;
    readonly onColumnsReordered: EventEmitter<ArgsGrid, IEventData>;
    readonly onColumnsResized: EventEmitter<ArgsGrid, IEventData>;
    readonly onContextMenu: EventEmitter<ArgsGrid, UIEvent>;
    readonly onDblClick: EventEmitter<ArgsCell, MouseEvent>;
    readonly onDrag: EventEmitter<ArgsGrid, UIEvent>;
    readonly onDragEnd: EventEmitter<ArgsGrid, UIEvent>;
    readonly onDragInit: EventEmitter<ArgsGrid, UIEvent>;
    readonly onDragStart: EventEmitter<ArgsGrid, UIEvent>;
    readonly onFooterRowCellRendered: EventEmitter<ArgsColumnNode, IEventData>;
    readonly onHeaderCellRendered: EventEmitter<ArgsColumnNode, IEventData>;
    readonly onHeaderClick: EventEmitter<ArgsColumn, IEventData>;
    readonly onHeaderContextMenu: EventEmitter<ArgsColumn, IEventData>;
    readonly onHeaderMouseEnter: EventEmitter<ArgsColumn, MouseEvent>;
    readonly onHeaderMouseLeave: EventEmitter<ArgsColumn, MouseEvent>;
    readonly onHeaderRowCellRendered: EventEmitter<ArgsColumnNode, IEventData>;
    readonly onKeyDown: EventEmitter<ArgsCell, KeyboardEvent>;
    readonly onMouseEnter: EventEmitter<ArgsGrid, MouseEvent>;
    readonly onMouseLeave: EventEmitter<ArgsGrid, MouseEvent>;
    readonly onScroll: EventEmitter<ArgsScroll, IEventData>;
    readonly onSelectedRowsChanged: EventEmitter<ArgsSelectedRowsChange, IEventData>;
    readonly onSort: EventEmitter<ArgsSort, IEventData>;
    readonly onValidationError: EventEmitter<ArgsValidationError, IEventData>;
    readonly onViewportChanged: EventEmitter<ArgsGrid, IEventData>;
    init(): void;
    addCellCssStyles(key: string, hash: CellStylesHash): void;
    autosizeColumns(): void;
    canCellBeActive(row: number, cell: number): boolean;
    canCellBeSelected(row: number, cell: number): boolean;
    clearTextSelection(): void;
    columnsResized(invalidate?: boolean): void;
    commitCurrentEdit(): boolean;
    destroy(): void;
    editActiveCell(editor?: EditorClass): void;
    flashCell(row: number, cell: number, speed?: number): void;
    focus(): void;
    getAbsoluteColumnMinWidth(): number;
    getActiveCanvasNode(e?: IEventData): HTMLElement;
    getActiveCellNode(): HTMLElement;
    getActiveViewportNode(e?: IEventData): HTMLElement;
    getCanvases(): any | HTMLElement[];
    getCanvasNode(columnIdOrIdx?: string | number, row?: number): HTMLElement;
    getCellCssStyles(key: string): CellStylesHash;
    getCellEditor(): Editor;
    getCellFromEvent(e: any): { row: number; cell: number; };
    getCellFromNode(cellNode: Element): number;
    getCellFromPoint(x: number, y: number): { row: number; cell: number; };
    getCellNode(row: number, cell: number): HTMLElement;
    getCellNodeBox(row: number, cell: number): { top: number; right: number; bottom: number; left: number; };
    getColspan(row: number, cell: number): number;
    getColumnById(id: string): Column<TItem>;
    getColumnFromNode(cellNode: Element): Column<TItem>;
    getColumnIndex(id: string): number;
    getColumns(): Column<TItem>[];
    getContainerNode(): HTMLElement;
    getData(): any;
    getDataItem(row: number): TItem;
    getDataItemValueForColumn(item: TItem, columnDef: Column<TItem>): any;
    getDataLength(): number;
    getDisplayedScrollbarDimensions(): { width: number; height: number; };
    getEditController(): EditController;
    getEditorLock(): EditorLock;
    getFooterRow(): HTMLElement;
    getFooterRowColumn(columnIdOrIdx: string | number): HTMLElement;
    getFormatter(row: number, column: Column<TItem>): ColumnFormat<TItem>;
    getFormatterContext(row: number, cell: number): FormatterContext;
    getGridPosition(): Position;
    getGroupingPanel(): HTMLElement;
    getHeader(): HTMLElement;
    getHeaderColumn(columnIdOrIdx: string | number): HTMLElement;
    getHeaderRow(): HTMLElement;
    getHeaderRowColumn(columnIdOrIdx: string | number): HTMLElement;
    getInitialColumnIndex(id: string): number;
    getInitialColumns(): Column<TItem>[];
    getOptions(): GridOptions<TItem>;
    getPluginByName(name: string): IPlugin;
    getPreHeaderPanel(): HTMLElement;
    getRenderedRange(viewportTop?: number, viewportLeft?: number): ViewRange;
    getRowFromNode(rowNode: Element): number;
    getScrollBarDimensions(): { width: number; height: number; };
    getSelectedRows(): number[];
    getSelectionModel(): SelectionModel;
    getSortColumns(): ColumnSort[];
    getTopPanel(): HTMLElement;
    getTotalsFormatter(column: Column<TItem>): ColumnFormat<TItem>;
    getUID(): string;
    getViewport(viewportTop?: number, viewportLeft?: number): ViewRange;
    getViewportNode(columnIdOrIdx?: string | number, row?: number): HTMLElement;
    getVisibleColumnById(id: string): Column<TItem>;
    getVisibleRange(viewportTop?: number, viewportLeft?: number): ViewRange;
    gotoCell(row: number, cell: number, forceEdit?: boolean): void;
    invalidate(): void;
    invalidateAllRows(): void;
    invalidateRow(row: number): void;
    invalidateRows(rows: number[]): void;
    registerPlugin(plugin: IPlugin): void;
    removeCellCssStyles(key: string): void;
    render: () => void;
    resetActiveCell(): void;
    resizeCanvas: () => void;
    scrollActiveCellIntoView(): void;
    scrollCellIntoView(row: number, cell: number, doPaging?: boolean): void;
    scrollColumnIntoView(cell: number): void;
    scrollRowIntoView(row: number, doPaging?: boolean): void;
    scrollRowToTop(row: number): void;
    setActiveCell(row: number, cell: number): void;
    setActiveRow(row: number, cell: number, suppressScrollIntoView?: boolean): void;
    setCellCssStyles(key: string, hash: CellStylesHash): void;
    setColumnHeaderVisibility(visible: boolean): void;
    setColumns(columns: Column<TItem>[]): void;
    setData(newData: any, scrollToTop?: boolean): void;
    setFooterRowVisibility(visible: boolean): void;
    setGroupingPanelVisibility(visible: boolean): void;
    setHeaderRowVisibility(visible: boolean): void;
    setOptions(args: GridOptions<TItem>, suppressRender?: boolean, suppressColumnSet?: boolean, suppressSetOverflow?: boolean): void;
    setPreHeaderPanelVisibility(visible: boolean): void;
    setSelectedRows(rows: number[]): void;
    setSelectionModel(model: SelectionModel): void;
    setSortColumn(columnId: string, ascending: boolean): void;
    setSortColumns(cols: ColumnSort[]): void;
    setTopPanelVisibility(visible: boolean): void;
    unregisterPlugin(plugin: IPlugin): void;
    updateCell(row: number, cell: number): void;
    updateColumnHeader(columnId: string, title?: string | ColumnFormat<any>, toolTip?: string): void;
    updatePagingStatusFromView(pagingInfo: { pageSize: number; pageNum: number; totalPages: number; }): void;
    updateRow(row: number): void;
    updateRowCount(): void;
}
